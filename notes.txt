Bio: 
Originally a historian turned English teacher, Victoria started to train as a developer 2 years ago as a way to 
find a new direction in life. She recently applied for Rails Girls Summer of Code and is currently working on 
a mental health open source project.

Abstract: Classes, methods, attributes? What are these things? 
What does it mean when it asks me to instantiate an object? What do I call and when?
In this talk, all of these questions will be answered and more as we take a look at OOP
and the language we use to work with it.

Warning: this talk includes some explicit language.

Proficiency: Basic understanding of Python is more than enough.


Speaker notes:
Classes often have methods, which are functions that are associated with a particular class, 
and do things associated with the thing that the class is - but if all you want is to do something, 
a function is all you need.

Essentially, a class is a way of grouping functions (as methods) and data (as properties) into a 
logical unit revolving around a certain kind of thing. If you don't need that grouping, there's no 
need to make a class.


https://stackoverflow.com/questions/625083/what-init-and-self-do-on-python

The __init__ method is roughly what represents a constructor in Python. When you call A() 
Python creates an object for you, and passes it as the first parameter to the __init__ method. 
Any additional parameters (e.g., A(24, 'Hello')) will also get passed as arguments--in this case 
causing an exception to be raised, since the constructor isn't expecting them.


class Parrot:

    # class attribute
    species = "bird"

    # instance attribute
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # instance method
    def sing(self, song):
        return f"{self.name} sings {song}"

    def dance(self):
        return f"{self.name} is now dancing"

# instantiate the object
blu = Parrot("Blu", 10)

# call our instance methods
print(blu.sing("'Happy'"))
print(blu.dance())

# instantiate the Parrot class
blu = Parrot("Blu", 10)
woo = Parrot("Woo", 15)

# access the class attributes
print(f"Blu is a {blu.__class__.species}")
print(f"Woo is also a {woo.__class__.species}"

# access the instance attributes
print(f"{blu.name} is {blu.age} years old")
print(f"{woo.name} is {woo.age} years old")


# parent class
class Bird():
    def __init__(self):
        print("Bird is ready")

    def whoisThis(self):
        print("Bird")

    def swim(self):
        print("Swim faster")

# child class
class Penguin(Bird):

    def __init__(self):
        # call super() function
        super().__init__()
        print("Penguin is ready")

    def whoisThis(self):
        print("Penguin")

    def run(self):
        print("Run faster")

peggy = Penguin()
peggy.whoisThis()
peggy.swim()
peggy.run()
